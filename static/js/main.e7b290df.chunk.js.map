{"version":3,"sources":["sortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","quickSortHelper","low","high","pi","pivot","temp","partition","getQuickSortAnimations","getBubbleSortAnimations","bubbleSortHelper","heapify","n","largest","l","r","swap","getHeapSortAnimations","heapSortHelper","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","props","updateDimensions","bind","state","width","height","this","setState","window","innerWidth","innerHeight","resetArray","size","randomIntFromInterval","addEventListener","removeEventListener","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","type","javaScriptSortedArray","sort","a","b","sortedArray","console","log","arraysAreEqual","className","role","aria-label","onClick","bubbleSort","mergeSort","quickSort","heapSort","map","value","idx","React","Component","min","max","random","arrayOne","arrayTwo","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e7b290df.chunk.js","sourcesContent":["//Merge Sort\nexport function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([j, j]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n\n//Quick Sort\nfunction partition(array, low, high, animations){\n  let i = low-1;\n  let pivot = array[high];\n  animations.push([0, high, high]);\n  for (let j = low; j < high; j++){\n    if (array[j] < pivot){\n      i++;\n      animations.push([1, i, j]);\n      animations.push([3, i, j]);\n      animations.push([2, i, j]);\n      let temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  }\n  animations.push([1, i+1, high]);\n  animations.push([3, i+1, high]);\n  animations.push([2, i+1, high]);\n  let temp = array[i+1];\n  array[i+1] = array[high];\n  array[high] = temp\n  animations.push([2, high, high]);\n  return i+1;\n}\n\nfunction quickSortHelper(array, low, high, animations){\n  if (low < high){\n    let pi = partition(array, low, high, animations);\n    quickSortHelper(array, low, pi-1, animations);\n    quickSortHelper(array, pi+1, high, animations);\n  }\n}\n\nexport function getQuickSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  quickSortHelper(array,0,array.length-1,animations);\n  return animations;\n}\n\n\n//Bubble Sort\nfunction bubbleSortHelper(array, high, animations){\n  for (let i = 0; i < high; i++){\n    for (let j = 0; j < high-i; j++)\n    {\n      animations.push([1, j, j+1]);\n      if (array[j] > array[j+1]){\n        animations.push([3, j, j+1]);\n        let temp = array[j]\n        array[j] = array[j+1]\n        array[j+1] = temp\n      }\n      animations.push([2, j, j+1]);\n    }\n  }\n}\nexport function getBubbleSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  bubbleSortHelper(array,array.length-1,animations);\n  return animations;\n}\n\n//heap Sort\nfunction heapify(array, n, i, animations){\n  var largest = i; // Initialize largest as root\n  var l = 2 * i + 1; // left = 2*i + 1\n  var r = 2 * i + 2; // right = 2*i + 2\n\n  // If left child is larger than root\n  if (l < n && array[l] > array[largest])\n      largest = l;\n\n  // If right child is larger than largest so far\n  if (r < n && array[r] > array[largest])\n      largest = r;\n\n  // If largest is not root\n  if (largest !== i) {\n      let swap = array[i];\n      array[i] = array[largest];\n      array[largest] = swap;\n      animations.push([1, i, largest]);\n      animations.push([3, i, largest]);\n      animations.push([2, i, largest]);\n\n      // Recursively heapify the affected sub-tree\n      heapify(array, n, largest, animations);\n  }\n}\n\nfunction heapSortHelper(array, animations){\n  var n = array.length;\n  // Build heap (rearrange array)\n  for (let i = n / 2 - 1; i >= 0; i--)\n      heapify(array, n, i, animations);\n\n  // One by one extract an element from heap\n  for (let i = n - 1; i > 0; i--) {\n      // Move current root to end\n      let temp = array[0];\n      array[0] = array[i];\n      array[i] = temp;\n      animations.push([1, i, 0]);\n      animations.push([3, i, 0]);\n      animations.push([2, i, 0]);\n\n      // call max heapify on the reduced heap\n      heapify(array, i, 0, animations);\n  }\n}\nexport function getHeapSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  heapSortHelper(array,animations);\n  return animations;\n}\n","import React from 'react';\nimport {getMergeSortAnimations, getQuickSortAnimations, getBubbleSortAnimations, getHeapSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './SortingVisualizer.css';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 5;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = '#2984F2';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\nconst TERTIARY_COLOR = 'yellow';\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.updateDimensions = this.updateDimensions.bind(this);\n    this.state = {\n      array: [],\n      width:  1600,\n      height: 900\n    };\n  }\n\n  updateDimensions() {\n    this.setState({ width: window.innerWidth, height: window.innerHeight});\n    this.resetArray();\n  }\n\n  resetArray() {\n    var size = Math.floor((this.state.width - 20)/5);\n    var height = Math.floor((this.state.height)*8/10);\n    const array = [];\n    for (let i = 0; i < size; i++) {\n      array.push(randomIntFromInterval(5, height));\n    }\n    this.setState({array});\n  }\n\n  componentDidMount() {\n    this.updateDimensions();\n    window.addEventListener(\"resize\", this.updateDimensions);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateDimensions);\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        //changing colors of comparing bars\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          //set new heights for bars\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {\n    const animations = getQuickSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++){\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const [type, barOneIdx, barTwoIdx] = animations[i];\n      setTimeout(() => {\n        if (type === 0){\n          //changing pivot colors\n          arrayBars[barOneIdx].style.backgroundColor = TERTIARY_COLOR;\n        }\n        else if (type === 1){\n          //Comparing colors\n          arrayBars[barOneIdx].style.backgroundColor = SECONDARY_COLOR;\n          arrayBars[barTwoIdx].style.backgroundColor = SECONDARY_COLOR;\n        }\n        else if (type === 2){\n          //resetting colors\n          arrayBars[barOneIdx].style.backgroundColor = PRIMARY_COLOR;\n          arrayBars[barTwoIdx].style.backgroundColor = PRIMARY_COLOR;\n        }\n        else {\n          //swapping heights\n          const temp = arrayBars[barOneIdx].style.height;\n          arrayBars[barOneIdx].style.height = arrayBars[barTwoIdx].style.height;\n          arrayBars[barTwoIdx].style.height = temp;\n        }\n      }, i * ANIMATION_SPEED_MS);\n    }\n  }\n\n  heapSort() {\n    const animations = getHeapSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++){\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const [type, barOneIdx, barTwoIdx] = animations[i];\n      setTimeout(() => {\n        if (type === 1){\n          //Comparing colors\n          arrayBars[barOneIdx].style.backgroundColor = SECONDARY_COLOR;\n          arrayBars[barTwoIdx].style.backgroundColor = SECONDARY_COLOR;\n        }\n        else if (type === 2){\n          //resetting colors\n          arrayBars[barOneIdx].style.backgroundColor = PRIMARY_COLOR;\n          arrayBars[barTwoIdx].style.backgroundColor = PRIMARY_COLOR;\n        }\n        else {\n          //swapping heights\n          const temp = arrayBars[barOneIdx].style.height;\n          arrayBars[barOneIdx].style.height = arrayBars[barTwoIdx].style.height;\n          arrayBars[barTwoIdx].style.height = temp;\n        }\n      }, i * 3);\n    }\n  }\n\n  bubbleSort() {\n    const animations = getBubbleSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++){\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const [type, barOneIdx, barTwoIdx] = animations[i];\n      setTimeout(() => {\n        if (type === 1){\n          //Comparing colors\n          arrayBars[barOneIdx].style.backgroundColor = SECONDARY_COLOR;\n          arrayBars[barTwoIdx].style.backgroundColor = SECONDARY_COLOR;\n        }\n        else if (type === 2){\n          //resetting colors\n          arrayBars[barOneIdx].style.backgroundColor = PRIMARY_COLOR;\n          arrayBars[barTwoIdx].style.backgroundColor = PRIMARY_COLOR;\n        }\n        else {\n          //swapping heights\n          const temp = arrayBars[barOneIdx].style.height;\n          arrayBars[barOneIdx].style.height = arrayBars[barTwoIdx].style.height;\n          arrayBars[barTwoIdx].style.height = temp;\n        }\n      }, i * 1);\n    }\n  }\n\n  // NOTE: This method will only work if your sorting algorithms actually return\n  // the sorted arrays; if they return the animations (as they currently do), then\n  // this method will be broken.\n  testSortingAlgorithms() {\n    for (let i = 0; i < 100; i++) {\n      const array = [];\n      const length = randomIntFromInterval(1, 1000);\n      for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n      }\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n      const sortedArray = getBubbleSortAnimations(array.slice());\n      console.log(arraysAreEqual(javaScriptSortedArray, sortedArray));\n    }\n  }\n\n  render() {\n    const {array} = this.state;\n\n    return (\n      <div className=\"card\">\n        <h5 className=\"card-title\">Sorting Visualizer</h5>\n          <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\n            <button className=\"btn btn-primary\" onClick={() => this.resetArray()}>Generate New Array</button>\n            <button className=\"btn btn-primary\" onClick={() => this.bubbleSort()}>Bubble Sort</button>\n            <button className=\"btn btn-primary\" onClick={() => this.mergeSort()}>Merge Sort</button>\n            <button className=\"btn btn-primary\" onClick={() => this.quickSort()}>Quick Sort</button>\n            <button className=\"btn btn-primary\" onClick={() => this.heapSort()}>Heap Sort</button>\n            {\n            // <button className=\"btn btn-primary\" onClick={() => this.testSortingAlgorithms()}>\n            //   Test Sorting Algorithms (BROKEN)\n            // </button>\n            }\n          </div>\n        <div className=\"card-body\">\n          <div className=\"array-container\">\n\n            <div className=\"content\">\n              {array.map((value, idx) => (\n                <div\n                  className=\"array-bar\"\n                  key={idx}\n                  style={{\n                    backgroundColor: PRIMARY_COLOR,\n                    height: `${value}px`,\n                  }}></div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}